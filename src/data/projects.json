{
	"projects": [
		{
			"id": "project1",
			"title": "Pet Tracker",
			"description": "A pet tracker app that allows you to track your pets using a LoRaWAN network",
			"demoLink": "#",
			"githubLink": "#",
			"learnMore": "/blog/pet-tracker",
			"blogContent": {
				"title": "Building a Pet Tracker with LoRaWAN",
				"date": "2024-03-15",
				"content": [
					{
						"type": "heading",
						"text": "Project Overview"
					},
					{
						"type": "paragraph",
						"text": "In this project, I began development of a pet tracking system using LoRaWAN technology and the Sidewalk gateway. The system consists of a small, lightweight tracker that can be attached to a pet's collar and a web application for monitoring their location."
					},
					{
						"type": "heading",
						"text": "Technical Stack"
					},
					{
						"type": "list",
						"items": [
							"LoRa Radio for long-range communication",
							"nrf52840 microcontroller for the tracker",
							"React for the web application",
							"MongoDB for storing location data"
						]
					},
					{
						"type": "heading",
						"text": "Getting Started"
					},
					{
						"type": "paragraph",
						"text": "We decided to use the Seeed Studio Xiao nRF52840 Sense board for the tracker, which comes with built-in Sidewalk capabilities. Once we got the board, we started small with the blinky example to get familiar with the Arduino IDE and bootloader."
					},
					{
						"type": "code",
						"language": "c",
						"text": "// blinky sameple\nvoid setup() {\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\nvoid loop() {\n  digitalWrite(LED_BUILTIN, HIGH);\n  delay(1000);\n  digitalWrite(LED_BUILTIN, LOW);\n  delay(1000);\n}"
					},
					{
						"type": "paragraph",
						"text": "We very quicky decided that the Arduino IDE is limited and decided to try PlatformIO. PlatformIO helps build a much larger project and compile it onto the microcontroller. We found a helpful <a href=\"https://wiki.seeedstudio.com/xiao-ble-sidewalk/\" target=\"_blank\" rel=\"noopener noreferrer\">sidewalk tutorial</a> that we thought would give us a nice start."
					},
					{
						"type": "heading",
						"text": "Prototype Board"
					},
					{
						"type": "paragraph",
						"text": "The Seeed Studio Xiao nRF52840 sense board only has Bluetooth which does allow communication with Amazon Sidewalk but only has a range of 100 meters. We decided to create a board that would include a E220-900T22S LoRa module and be portable. We also included a connector for a LiPo battery to be recharged using the USB-C from the microcontroller. We decided to stick with a rechargeable solution since we arenâ€™t certain about how much power it draws. LoRa range is around 10km which allows for greater coverage and no need for GPS. The goal was to maximize battery while keeping a slim and comfortable profile for a pet."
					},
					{
						"type": "heading",
						"text": "Development"
					},
					{
						"type": "paragraph",
						"text": "I began following the guide and installed all the dependencies that are needed. There is a Nordic application for development called <a href=\"https://www.nordicsemi.com/Products/Development-tools/nrf-connect-for-desktop/\" target=\"_blank\" rel=\"noopener noreferrer\">nRF Connect</a> which helps setup the zephyr sdk and helps flash new firmware onto the nrf52840. Once I setup all the dev tools I ran the provisioning script for the Nordic SoC. This creates a credentials.json file that is used to authenticate with the Sidewalk network."
					},
					{
						"type": "image",
						"items": "sidewalk.png",
						"alt": "Sidewalk IOT Core",
						"caption": "Snapshot of IOT Core Sidewalk provisioned device"
					},
					{
						"type": "heading",
						"text": "Where I'm At"
					},
					{
						"type": "paragraph",
						"text": "I have reached a roadblock where two hex files need to be flashed onto the microcontroller. I made an oversight where I thought a jlink would not be necessary since the board has an Arduino bootloader. I discovered that you could flash a .uf2 file using Arduino but not a .hex file. There seems to be ways to convert .hex files to .uf2 files but they are not reliable. It is also not recommended to combine .hex files after being compiled."
					},
					{
						"type": "heading",
						"text": "Next Steps"
					},
					{
						"type": "paragraph",
						"text": "I think there is still a lot to do in this project. One big step I want to get accomplished is getting a location using just the Sidewalk network. Jlink has a lot of benefits, it allows debugging but can also store information in specific registers of the flash."
					},
					{
						"type": "iframe",
						"src": "https://xd.adobe.com/embed/feae6c77-c1fb-4968-9f7e-bdae4ec1c82f-abfd/",
						"title": "Pet Tracker Prototype web app",
						"alt": "Pet Tracker Prototype web app"
					},
					{
						"type": "paragraph",
						"text": "This is a simple concept design I had for a react website that would help locate your pet. On the bottom left it would have your pets and a corresponding location on a map."
					}
				]
			}
		},
		{
			"id": "project2",
			"title": "Dark Souls",
			"description": "A database application that stores weapons, armor, boss entities, spells, and all their corresponding stats",
			"demoLink": "#",
			"githubLink": "#",
			"learnMore": "/blog/dark-souls",
			"blogContent": {
				"title": "Creating a Dark Souls Database Application",
				"date": "2024-02-20",
				"content": [
					{
						"type": "paragraph",
						"text": "This project involved creating a comprehensive database of Dark Souls game data, including weapons, armor, bosses, and spells. The application allows users to search, filter, and compare different items and their stats."
					},
					{
						"type": "heading",
						"text": "Features"
					},
					{
						"type": "list",
						"items": [
							"Advanced search functionality",
							"Item comparison tool",
							"Build calculator",
							"Interactive UI with game-inspired design"
						]
					},
					{
						"type": "heading",
						"text": "Technical Implementation"
					},
					{
						"type": "paragraph",
						"text": "The application uses a RESTful API architecture with a PostgreSQL database. The frontend is built with React and styled with a dark theme inspired by the game's aesthetic."
					}
				]
			}
		},
		{
			"id": "project3",
			"title": "Project 3",
			"description": "Description of your third project goes here.",
			"demoLink": "#",
			"githubLink": "#",
			"learnMore": "/blog/project3",
			"blogContent": {
				"title": "Project 3: Detailed Overview",
				"date": "2024-01-10",
				"content": [
					{
						"type": "paragraph",
						"text": "This is a placeholder for the third project's blog post content."
					}
				]
			}
		}
	]
}
